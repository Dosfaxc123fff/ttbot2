import asyncio
import logging
import aiomysql
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from flask import Flask
from threading import Thread

API_TOKEN = '7584543228:AAFIxZ8BRW3DKDN5mgPqjNb_VBa4bW8Q8dE'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

CHANNEL_ID = -1002279944530  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def get_anime_by_code(code: str):
    try:
        conn = await aiomysql.connect(
            host='mysql-lakalut.alwaysdata.net',
            port=3306,
            user='lakalut',
            password='cfrfvjnj1201',
            db='lakalut_tbot'
        )
        async with conn.cursor() as cur:
            await cur.execute("SELECT title, genre, image_url FROM anime WHERE code = %s", (code,))
            result = await cur.fetchone()
            await conn.ensure_closed()
            if result:
                text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result[0]}\n–ñ–∞–Ω—Ä: {result[1]}"
                image_url = result[2]
                return text, image_url
            else:
                return "–ê–Ω–∏–º–µ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", None
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", None

async def get_anime_titles_by_genre(genre: str):
    try:
        conn = await aiomysql.connect(
            host='mysql-lakalut.alwaysdata.net',
            port=3306,
            user='lakalut',
            password='cfrfvjnj1201',
            db='lakalut_tbot'
        )
        async with conn.cursor() as cur:
            await cur.execute("SELECT title FROM anime WHERE genre = %s", (genre,))
            results = await cur.fetchall()
            await conn.ensure_closed()
            if results:
                titles = "\n".join([row[0] for row in results])
                return f"–ê–Ω–∏–º–µ –≤ –∂–∞–Ω—Ä–µ '{genre}':\n{titles}"
            else:
                return f"–ê–Ω–∏–º–µ –≤ –∂–∞–Ω—Ä–µ '{genre}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_user_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status not in ["left", "kicked"]
    except Exception:
        return False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
search_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –ö–æ–¥"), KeyboardButton(text="üé≠ –ñ–∞–Ω—Ä")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    ],
    resize_keyboard=True
)

code_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ó–Ω–∞—é"), KeyboardButton(text="üîç –ù–∞–π—Ç–∏ (–≤ –¢–¢)")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

genre_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç—ç–∑–∏"), KeyboardButton(text="üíñ –†–æ–º–∞–Ω—Ç–∏–∫–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

info_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    if await is_user_subscribed(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=search_keyboard)
    else:
        await message.answer(
            '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. <a href="https://t.me/+kD6jJfENAXJhZjAy">—Ç—ã–∫ 3&lt;</a>, –ø–æ—Å–ª–µ –Ω–∞–∂–∏–º–∏—Ç–µ —Å–Ω–æ–≤–∞ /start',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )

async def check_subscription_and_respond(message: types.Message):
    if not await is_user_subscribed(message.from_user.id):
        await message.answer(
            '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. <a href="https://t.me/+kD6jJfENAXJhZjAy">—Ç—ã–∫ 3&lt;</a>, –ø–æ—Å–ª–µ –Ω–∞–∂–∏–º–∏—Ç–µ —Å–Ω–æ–≤–∞ /start',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return False
    return True

@dp.message(lambda message: message.text == "üìÑ –ö–æ–¥")
async def show_code_options(message: types.Message):
    if await check_subscription_and_respond(message):
        await message.answer("–ó–Ω–∞–µ—Ç–µ –∫–æ–¥ –∞–Ω–∏–º–µ?", reply_markup=code_keyboard)

@dp.message(lambda message: message.text == "üé≠ –ñ–∞–Ω—Ä")
async def handle_genre_option(message: types.Message):
    if await check_subscription_and_respond(message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=genre_keyboard)

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_option(message: types.Message):
    if await check_subscription_and_respond(message):
        await message.answer("–í —Ä–∞–∑–¥–µ–ª–µ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.", reply_markup=info_keyboard)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_to_search(message: types.Message):
    if await check_subscription_and_respond(message):
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é:", reply_markup=search_keyboard)

@dp.message(lambda message: message.text == "‚úÖ –ó–Ω–∞—é")
async def handle_know_option(message: types.Message):
    if await check_subscription_and_respond(message):
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –∞–Ω–∏–º–µ:")

@dp.message(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ (–≤ –¢–¢)")
async def handle_tiktok_option(message: types.Message):
    if await check_subscription_and_respond(message):
        tiktok_url = "https://www.tiktok.com/@bbw.anime"
        await message.answer(
            f"–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–µ–±–µ –∞–Ω–∏–º–µ –ø–æ –∫–æ–¥—É, –ø–µ—Ä–µ–π–¥–∏ –≤ –º–æ–π TikTok –∞–∫–∫–∞—É–Ω—Ç: {tiktok_url}\n\n"
            f"–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–∞–π–¥—ë—à—å, –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏ ‚úÖ –ó–Ω–∞—é, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∏ –∫–æ–¥ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –ø—Ä–∏–≥–ª—è–Ω—É–ª–æ—Å—å :)"
        )

@dp.message(lambda message: message.text == "üíñ –†–æ–º–∞–Ω—Ç–∏–∫–∞")
async def handle_romance_genre(message: types.Message):
    if await check_subscription_and_respond(message):
        result = await get_anime_titles_by_genre("–†–æ–º–∞–Ω—Ç–∏–∫–∞")
        await message.answer(result)

@dp.message(lambda message: message.text == "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç—ç–∑–∏")
async def handle_fantasy_genre(message: types.Message):
    if await check_subscription_and_respond(message):
        result = await get_anime_titles_by_genre("–§—ç–Ω—Ç—ç–∑–∏")
        await message.answer(result)

@dp.message(lambda message: message.text.strip().isalnum())
async def handle_anime_code(message: types.Message):
    if await check_subscription_and_respond(message):
        code = message.text.strip()
        text, image_url = await get_anime_by_code(code)
        if image_url:
            await message.answer_photo(photo=image_url, caption=text)
        else:
            await message.answer(text)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

if __name__ == '__main__':
    keep_alive()  # –∑–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.run(main())  # –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞


